plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.liquibase:liquibase-core'
    implementation 'com.auth0:java-jwt:3.18.2'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

task generateProducts() {
    doLast {
        File dataSql = file("src/main/resources/data.sql");
        dataSql.write("");
        // categories
        for (int i = 1; i <= 7; i++) {
            dataSql.append("INSERT INTO CATEGORY(category_id, name) " +
                    "VALUES(${i}, 'Category ${i}');\n");
        }
        // products
        for (int i = 1; i <= 100; i++) {
            int categoryId = 1 + i / 20;
            dataSql.append("INSERT INTO PRODUCT(id, name, description, price, category_id, main_image_name) " +
                    "VALUES(${i}, 'Name ${i}', 'Description ${i}', ${i * 5}, ${categoryId}, 'java-logo.png');\n");
        }
    }
}
